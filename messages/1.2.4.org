* 1.2.4

	Core Idea: Value vs Output execution

** Links Improvements
   By default most file links will be loaded within sublime.
   If there is a file type you want launched outside of sublime use:

   #+BEGIN_EXAMPLE
     "file_exclude_patterns": ["*.pdf"],
   #+END_EXAMPLE

** Column View
  - Fixed a problem where the columnview dynamic block was grabbing its column definitions
    from the current node. This would cause column view to use the default definition.

	 #+COLUMNS: %TODO(To do) %ITEM(Task) %TAGS(Tags) %Effort(effort)
   #+BEGIN: columnview :id global :indent t
   | TODO | Task          | Tags | effort |
   |      | 1.2.4         |      |        |
   | DONE | ..Column View |      |        |
   #+END:

** Value Type Execution

  Acts like a function, the return statement of the code is returned.

  #+BEGIN_SRC python :results value
      print("Hello world")
      print("Hello world2")
      if 5 < 10:
        print("hi")
      return 11
  #+END_SRC
   #+RESULTS:
   : 11
    
   #+BEGIN_SRC powershell :results value
     Write-Host "Hello World"
     return 10
   #+END_SRC
   #+RESULTS:
   : 10

** Chainging Execution

  A src block should be able to reference another src block as an input.
  This is a REALLY early version of this. Only tables work at the moment.

  There are a couple of challenges here:

  - Things move as other items execute, I haven't fully solved that yet.
  - Right now I ALWAYS execute the target source block, I need to improve that going forward.
  - Errors in the chain are not handled very well yet.

  #+NAME: tbl-source
  | a | b | c | d | e |
  | 1 | 2 | 3 | 4 | 5 |

  This source block uses the output from the table above

  #+NAME: python-src
  #+BEGIN_SRC python :results table :var DATA=tbl-source
   print(DATA)
  #+END_SRC

  #+RESULTS:
   | a | b | c | d | e |
   | 1 | 2 | 3 | 4 | 5 |


   This source block uses the output from python-src as an input

   #+BEGIN_SRC python :results table :var DATA=python-src
    print(DATA) 
   #+END_SRC

   #+RESULTS:
   | a | b | c | d | e |
   | 1 | 2 | 3 | 4 | 5 |







